const express = require('express');
const cors = require('cors');
const path = require('path');
require('dotenv').config();

// Added debugging for API key troubleshooting
const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('.'));

// Serve the HTML file
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// API endpoint for generating poetry
app.post('/api/generate-poem', async (req, res) => {
    try {
        const { theme, verses, provider } = req.body;
        
        // Debug logging - Basic request info
        console.log('=== POEM GENERATION REQUEST ===');
        console.log('Request body:', { theme, verses, provider });
        console.log('Environment check:');
        console.log('- ANTHROPIC_API_KEY exists:', !!process.env.ANTHROPIC_API_KEY);
        console.log('- OPENAI_API_KEY exists:', !!process.env.OPENAI_API_KEY);
        
        if (process.env.ANTHROPIC_API_KEY) {
            console.log('- Anthropic key (first 10 chars):', process.env.ANTHROPIC_API_KEY.substring(0, 10) + '...');
        }
        if (process.env.OPENAI_API_KEY) {
            console.log('- OpenAI key (first 10 chars):', process.env.OPENAI_API_KEY.substring(0, 10) + '...');
        }
        
        if (!theme || !verses) {
            return res.status(400).json({ error: 'Missing required parameters' });
        }

        // Enhanced prompt with few-shot examples and chain of thought
        const poetryExamples = {
            'ÿßŸÑÿ∑ŸàŸäŸÑ': {
                pattern: 'ŸÅŸéÿπŸèŸàŸÑŸèŸÜ ŸÖŸéŸÅŸéÿßÿπŸêŸäŸÑŸèŸÜ ŸÅŸéÿπŸèŸàŸÑŸèŸÜ ŸÖŸéŸÅŸéÿßÿπŸêŸÑŸèŸÜ',
                example: 'ŸÑŸéÿπŸéŸÖŸíÿ±ŸèŸÉŸé ŸÖŸéÿß ÿßŸÑÿ£ŸéŸäŸéŸëÿßŸÖŸè ÿ•ŸêŸÑŸéŸëÿß ŸÖŸéÿπŸéÿßÿ±Ÿéÿ©Ÿå\nŸÅŸéŸÖŸéÿß ÿßÿ≥Ÿíÿ™Ÿéÿ∑ŸéŸÑŸéÿ™Ÿí ÿ£ŸéŸäŸéŸëÿßŸÖŸéŸáŸéÿß ÿ±Ÿèÿ®ŸéŸë ÿ∑ŸèŸàŸÑŸê'
            },
            'ÿßŸÑŸÉÿßŸÖŸÑ': {
                pattern: 'ŸÖŸèÿ™ŸéŸÅŸéÿßÿπŸêŸÑŸèŸÜ ŸÖŸèÿ™ŸéŸÅŸéÿßÿπŸêŸÑŸèŸÜ ŸÖŸèÿ™ŸéŸÅŸéÿßÿπŸêŸÑŸèŸÜ',
                example: 'ÿ®ŸéÿØŸéÿß ŸÇŸéŸÖŸéÿ±Ÿå ŸÅŸêŸä ŸÑŸéŸäŸíŸÑŸéÿ©Ÿç ÿ∏ŸéŸÑŸíŸÖŸéÿßÿ°Ÿé\nŸäŸèÿ∂ŸêŸäÿ°Ÿè ÿØŸèÿ±ŸèŸàÿ®Ÿé ÿßŸÑÿ≥ŸéŸëÿßÿ¶Ÿêÿ±ŸêŸäŸÜŸé ÿ•Ÿêÿ∂Ÿéÿßÿ°Ÿéÿ©Ÿí'
            },
            'ÿßŸÑÿ®ÿ≥Ÿäÿ∑': {
                pattern: 'ŸÖŸèÿ≥Ÿíÿ™ŸéŸÅŸíÿπŸêŸÑŸèŸÜ ŸÅŸéÿßÿπŸêŸÑŸèŸÜ ŸÖŸèÿ≥Ÿíÿ™ŸéŸÅŸíÿπŸêŸÑŸèŸÜ ŸÅŸéÿπŸêŸÑŸèŸÜ',
                example: 'ÿ•Ÿêÿ∞Ÿéÿß ÿ∫ŸéÿßŸÖŸéÿ±Ÿíÿ™Ÿé ŸÅŸêŸä ÿ¥Ÿéÿ±ŸéŸÅŸç ŸÖŸéÿ±ŸèŸàŸÖŸê\nŸÅŸéŸÑŸéÿß ÿ™ŸéŸÇŸíŸÜŸéÿπŸí ÿ®ŸêŸÖŸéÿß ÿØŸèŸàŸÜŸé ÿßŸÑŸÜŸèŸëÿ¨ŸèŸàŸÖŸê'
            }
        };

        const systemRole = 'ÿ£ŸÜÿ™ ÿ¥ÿßÿπÿ± ÿπÿ±ÿ®Ÿä ŸÅÿµŸäÿ≠ ŸàÿÆÿ®Ÿäÿ± ŸÅŸä ÿßŸÑÿπÿ±Ÿàÿ∂ ŸàÿßŸÑŸÇŸàÿßŸÅŸäÿå ÿ™ŸèŸÜÿ¥ÿ¶ ŸÇÿµÿßÿ¶ÿØ ŸÖŸÑÿ™ÿ≤ŸÖÿ© ÿ™ŸÖÿßŸÖÿßŸã ÿ®ÿßŸÑŸàÿ≤ŸÜ ŸàÿßŸÑŸÇÿßŸÅŸäÿ© Ÿàÿ®ÿßŸÑÿ™ÿ¥ŸÉŸäŸÑ.';
        
        const userPrompt = `ÿßŸÉÿ™ÿ® ŸÇÿµŸäÿØÿ© ÿπÿ±ÿ®Ÿäÿ© ÿ¨ŸÖŸäŸÑÿ© ÿπŸÜ ŸÖŸàÿ∂Ÿàÿπ "${theme}"

ÿ£ŸÖÿ´ŸÑÿ© ÿπŸÑŸâ ÿßŸÑÿ®ÿ≠Ÿàÿ± ÿßŸÑÿ¥ÿπÿ±Ÿäÿ©:

üîπ ÿßŸÑÿ®ÿ≠ÿ± ÿßŸÑÿ∑ŸàŸäŸÑ:
ÿßŸÑÿ™ŸÅÿπŸäŸÑÿ©: ${poetryExamples['ÿßŸÑÿ∑ŸàŸäŸÑ'].pattern}
ŸÖÿ´ÿßŸÑ: ${poetryExamples['ÿßŸÑÿ∑ŸàŸäŸÑ'].example}

üîπ ÿßŸÑÿ®ÿ≠ÿ± ÿßŸÑŸÉÿßŸÖŸÑ:
ÿßŸÑÿ™ŸÅÿπŸäŸÑÿ©: ${poetryExamples['ÿßŸÑŸÉÿßŸÖŸÑ'].pattern}
ŸÖÿ´ÿßŸÑ: ${poetryExamples['ÿßŸÑŸÉÿßŸÖŸÑ'].example}

üîπ ÿßŸÑÿ®ÿ≠ÿ± ÿßŸÑÿ®ÿ≥Ÿäÿ∑:
ÿßŸÑÿ™ŸÅÿπŸäŸÑÿ©: ${poetryExamples['ÿßŸÑÿ®ÿ≥Ÿäÿ∑'].pattern}
ŸÖÿ´ÿßŸÑ: ${poetryExamples['ÿßŸÑÿ®ÿ≥Ÿäÿ∑'].example}

ÿßŸÑŸÖÿ∑ŸÑŸàÿ® (Chain of Thought):

1Ô∏è‚É£ **ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ**: ŸÅŸÉÿ± ŸÅŸä ÿßŸÑŸÖŸàÿ∂Ÿàÿπ "${theme}" Ÿàÿ≠ÿØÿØ ÿßŸÑŸÖÿ¥ÿßÿπÿ± ŸàÿßŸÑÿµŸàÿ± ÿßŸÑŸÖŸÜÿßÿ≥ÿ®ÿ©.

2Ô∏è‚É£ **ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑÿ®ÿ≠ÿ±**: ÿßÿÆÿ™ÿ± ÿ®ÿ≠ÿ±ÿßŸã Ÿàÿßÿ≠ÿØÿßŸã ŸÖŸÜ [ÿßŸÑÿ∑ŸàŸäŸÑÿå ÿßŸÑŸÉÿßŸÖŸÑÿå ÿßŸÑÿ®ÿ≥Ÿäÿ∑] ŸäŸÜÿßÿ≥ÿ® ÿ∑ÿ®Ÿäÿπÿ© ÿßŸÑŸÖŸàÿ∂Ÿàÿπ.

3Ô∏è‚É£ **ÿßŸÑÿ™ÿÆÿ∑Ÿäÿ∑**: ÿÆÿ∑ÿ∑ ŸÑŸÄ ${verses} ÿ£ÿ®Ÿäÿßÿ™ ŸÖÿ™ÿ±ÿßÿ®ÿ∑ÿ© ÿßŸÑŸÖÿπŸÜŸâ ŸÖÿπ ŸÇÿßŸÅŸäÿ© ŸÖŸàÿ≠ÿØÿ©.

4Ô∏è‚É£ **ÿßŸÑŸÉÿ™ÿßÿ®ÿ©**: ÿßŸÉÿ™ÿ® ŸÉŸÑ ÿ®Ÿäÿ™ ŸÖŸÑÿ™ÿ≤ŸÖÿßŸã ÿ®ŸÄ:
   ‚Ä¢ ÿßŸÑÿ™ŸÅÿπŸäŸÑÿ© ÿßŸÑŸÖÿÆÿ™ÿßÿ±ÿ© ÿ®ÿØŸÇÿ©
   ‚Ä¢ ÿßŸÑŸÇÿßŸÅŸäÿ© ÿßŸÑŸÖŸàÿ≠ÿØÿ©
   ‚Ä¢ ÿßŸÑÿ™ÿ¥ŸÉŸäŸÑ ÿßŸÑŸÉÿßŸÖŸÑ
   ‚Ä¢ ÿßŸÑŸÖÿπŸÜŸâ ÿßŸÑŸàÿßÿ∂ÿ≠ ŸàÿßŸÑÿ¨ŸÖŸäŸÑ

5Ô∏è‚É£ **ÿßŸÑŸÖÿ±ÿßÿ¨ÿπÿ©**: ÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿµÿ≠ÿ© ÿßŸÑŸàÿ≤ŸÜ ŸàÿßŸÑŸÇÿßŸÅŸäÿ© ŸÅŸä ŸÉŸÑ ÿ®Ÿäÿ™.

ÿßŸÉÿ™ÿ® ÿßŸÑŸÇÿµŸäÿØÿ© ŸÖÿ®ÿßÿ¥ÿ±ÿ© ÿ®ÿØŸàŸÜ ŸÖŸÇÿØŸÖÿßÿ™ÿå ŸÖÿπ ÿ¨ÿπŸÑ ŸÉŸÑ ÿ®Ÿäÿ™ ŸÅŸä ÿ≥ÿ∑ÿ± ŸÖŸÜŸÅÿµŸÑ.`;

        // For Anthropic (combine system role with user prompt)
        const anthropicPrompt = `${systemRole}

${userPrompt}`;

        // For OpenAI (separate system and user roles)
        const openaiSystemRole = systemRole;
        const openaiUserPrompt = userPrompt;

        // Debug logging
        console.log('üé≠ Poetry generation request:', { theme, provider, verses });
        console.log('üîë API Keys status:', {
            anthropic: process.env.ANTHROPIC_API_KEY ? `${process.env.ANTHROPIC_API_KEY.substring(0, 10)}...` : 'NOT SET',
            openai: process.env.OPENAI_API_KEY ? `${process.env.OPENAI_API_KEY.substring(0, 10)}...` : 'NOT SET'
        });

        let poem;
        
        if (provider === 'anthropic' && process.env.ANTHROPIC_API_KEY) {
            console.log('üìû Calling Anthropic API...');
            poem = await callAnthropicAPI(anthropicPrompt, process.env.ANTHROPIC_API_KEY);
        } else if (provider === 'openai' && process.env.OPENAI_API_KEY) {
            console.log('üìû Calling OpenAI API...');
            poem = await callOpenAIAPI(openaiSystemRole, openaiUserPrompt, process.env.OPENAI_API_KEY);
        } else {
            // Fallback to available provider
            if (process.env.ANTHROPIC_API_KEY) {
                console.log('üìû Fallback: Using Anthropic API...');
                poem = await callAnthropicAPI(anthropicPrompt, process.env.ANTHROPIC_API_KEY);
            } else if (process.env.OPENAI_API_KEY) {
                console.log('üìû Fallback: Using OpenAI API...');
                poem = await callOpenAIAPI(openaiSystemRole, openaiUserPrompt, process.env.OPENAI_API_KEY);
            } else {
                console.log('‚ùå No API keys configured!');
                return res.status(500).json({ error: 'No API keys configured' });
            }
        }

        console.log('‚úÖ Poem generated successfully');
        res.json({ poem, provider: provider || 'fallback' });

    } catch (error) {
        console.error('‚ùå Error generating poem:', error);
        console.error('Error details:', {
            message: error.message,
            status: error.status,
            provider: req.body.provider
        });
        res.status(500).json({ error: error.message });
    }
});

// Check available providers
app.get('/api/providers', (req, res) => {
    const providers = {
        anthropic: !!process.env.ANTHROPIC_API_KEY,
        openai: !!process.env.OPENAI_API_KEY
    };
    res.json(providers);
});

async function callAnthropicAPI(prompt, apiKey) {
    console.log('ü§ñ Anthropic API Call Details:');
    console.log('- API Key length:', apiKey.length);
    console.log('- API Key prefix:', apiKey.substring(0, 15) + '...');
    console.log('- Prompt length:', prompt.length);
    console.log('- Model: claude-sonnet-4-20250514');
    
    try {
        const requestBody = {
            model: 'claude-sonnet-4-20250514',
            max_tokens: 1000,
            temperature: 0.8,
            messages: [
                {
                    role: 'user',
                    content: prompt
                }
            ]
        };
        
        console.log('- Request body size:', JSON.stringify(requestBody).length);
        
        const response = await fetch('https://api.anthropic.com/v1/messages', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'x-api-key': apiKey,
                'anthropic-version': '2023-06-01'
            },
            body: JSON.stringify(requestBody)
        });

        console.log('üì° Anthropic Response:');
        console.log('- Status:', response.status);
        console.log('- Status Text:', response.statusText);
        console.log('- Headers:', Object.fromEntries(response.headers.entries()));

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Anthropic API Error Response:', errorText);
            
            let errorDetails;
            try {
                errorDetails = JSON.parse(errorText);
                console.error('‚ùå Parsed error details:', errorDetails);
            } catch (parseError) {
                console.error('‚ùå Could not parse error response as JSON');
            }
            
            throw new Error(`Anthropic API Error: ${response.status} ${response.statusText} - ${errorText}`);
        }

        const data = await response.json();
        console.log('‚úÖ Anthropic Success Response Structure:');
        console.log('- Has content array:', !!data.content);
        console.log('- Content array length:', data.content ? data.content.length : 'N/A');
        console.log('- First content type:', data.content && data.content[0] ? data.content[0].type : 'N/A');
        console.log('- Text length:', data.content && data.content[0] && data.content[0].text ? data.content[0].text.length : 'N/A');
        
        return data.content[0].text.trim();
        
    } catch (error) {
        console.error('üí• Anthropic API Call Exception:', error.message);
        console.error('üí• Full error object:', error);
        throw error;
    }
}

async function callOpenAIAPI(systemRole, userPrompt, apiKey) {
    console.log('ü§ñ OpenAI API Call Details:');
    console.log('- API Key length:', apiKey.length);
    console.log('- API Key prefix:', apiKey.substring(0, 10) + '...');
    console.log('- System role length:', systemRole.length);
    console.log('- User prompt length:', userPrompt.length);
    console.log('- Model: gpt-4o');
    
    try {
        const requestBody = {
            model: 'gpt-4o',
            max_tokens: 1000,
            temperature: 0.8,
            messages: [
                {
                    role: 'system',
                    content: systemRole
                },
                {
                    role: 'user',
                    content: userPrompt
                }
            ]
        };
        
        console.log('- Request body size:', JSON.stringify(requestBody).length);
        
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${apiKey}`
            },
            body: JSON.stringify(requestBody)
        });

        console.log('üì° OpenAI Response:');
        console.log('- Status:', response.status);
        console.log('- Status Text:', response.statusText);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå OpenAI API Error Response:', errorText);
            
            let errorDetails;
            try {
                errorDetails = JSON.parse(errorText);
                console.error('‚ùå Parsed error details:', errorDetails);
            } catch (parseError) {
                console.error('‚ùå Could not parse error response as JSON');
            }
            
            throw new Error(`OpenAI API Error: ${response.status} ${response.statusText} - ${errorText}`);
        }

        const data = await response.json();
        console.log('‚úÖ OpenAI Success Response Structure:');
        console.log('- Has choices array:', !!data.choices);
        console.log('- Choices array length:', data.choices ? data.choices.length : 'N/A');
        console.log('- First choice has message:', data.choices && data.choices[0] ? !!data.choices[0].message : 'N/A');
        console.log('- Content length:', data.choices && data.choices[0] && data.choices[0].message ? data.choices[0].message.content.length : 'N/A');
        
        return data.choices[0].message.content.trim();
        
    } catch (error) {
        console.error('üí• OpenAI API Call Exception:', error.message);
        console.error('üí• Full error object:', error);
        throw error;
    }
}

app.listen(PORT, () => {
    console.log(`üé≠ Arabic Poetry Generator server running on port ${PORT}`);
    console.log(`üåê Open http://localhost:${PORT} in your browser`);
    
    // Environment variables check at startup
    console.log('\nüîß Environment Variables Status:');
    console.log('- NODE_ENV:', process.env.NODE_ENV || 'development');
    console.log('- ANTHROPIC_API_KEY:', process.env.ANTHROPIC_API_KEY ? 
        `‚úÖ Set (${process.env.ANTHROPIC_API_KEY.length} chars, starts with: ${process.env.ANTHROPIC_API_KEY.substring(0, 15)}...)` : 
        '‚ùå Not set');
    console.log('- OPENAI_API_KEY:', process.env.OPENAI_API_KEY ? 
        `‚úÖ Set (${process.env.OPENAI_API_KEY.length} chars, starts with: ${process.env.OPENAI_API_KEY.substring(0, 10)}...)` : 
        '‚ùå Not set');
    console.log('');
    
    // Enhanced debugging - updated deployment trigger
});
